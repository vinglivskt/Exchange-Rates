import json

import telebot
import update as update

import config
from telebot import types
# from Exchange_Rates import get_currency_price
from Exchange_Rates import sum
from Exchange_Rates import toFixed
from Exchange_Rates import get_currency_price

url_us = "http://www.floatrates.com/daily/usd.json"
url_eu = 'http://www.floatrates.com/daily/eur.json'
url_ua = 'http://www.floatrates.com/daily/uah.json'
url_ru = 'http://www.floatrates.com/daily/rub.json'
# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤–º–µ—Å—Ç–µ —Å URL
bot = telebot.TeleBot(config.TOKEN)


def oops():
    return "–û–π, –≤—ã –ø–æ—Ö–æ–¥—É –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –≤–≤–æ–¥–µ, –ø–æ–ø—Ä–æ—à—É –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–∞ üòä\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞"


def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Åü§ë")
    item2 = types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Çüí±")
    markup.add(item1, item2)
    return markup


def learn_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüíµ")
    item2 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüá∫üá¶")
    item3 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüí∂")
    item4 = types.KeyboardButton("More")
    Back = types.KeyboardButton("–ù–∞–∑–∞–¥ üö™")
    markup.add(item1, item2, item3, item4, Back)
    return markup


def transfer_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    us_ru = types.KeyboardButton("US ‚û° RU")
    us_ua = types.KeyboardButton("US ‚û° UA")
    us_eu = types.KeyboardButton("US ‚û° EU")

    ru_us = types.KeyboardButton("RU ‚û° US")
    ru_ua = types.KeyboardButton("RU ‚û° UA")
    ru_eu = types.KeyboardButton("RU ‚û° EU")

    ua_us = types.KeyboardButton("UA ‚û° US")
    ua_ru = types.KeyboardButton("UA ‚û° RU")
    ua_eu = types.KeyboardButton("UA ‚û° EU")

    eu_us = types.KeyboardButton("EU ‚û° US")
    eu_ru = types.KeyboardButton("EU ‚û° RU")
    eu_ua = types.KeyboardButton("EU ‚û° UA")
    Back = types.KeyboardButton("–ù–∞–∑–∞–¥ üö™")
    markup.add(us_ru, us_ua, us_eu, ru_us, ru_ua, ru_eu, ua_ru, ua_us, ua_eu, eu_us, eu_ru, eu_ua, Back)
    return markup


@bot.message_handler(commands=['insta'])
def Instagram(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º", url="https://www.instagram.com/vinglivskt/?r=nametag"))
    sti = open('static/Putin6.jpg', 'rb')
    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–æ–π Instagram", parse_mode='html',
                     reply_markup=markup)


@bot.message_handler(commands=['start'])
def Welcome(message):
    sti = open('static/Putin.jpg', 'rb')
    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, "
                     "–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π ""—É–º–µ–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç. "
                     "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n""/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                     "/vk - –º–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
                     "/insta - –º–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Instagram".format(message.from_user, bot.get_me()), parse_mode='html',
                     reply_markup=start_menu())


@bot.message_handler(commands=['vk'])
def vk(message):
    markup = types.InlineKeyboardMarkup()
    sti = open('static/Putin5.png', 'rb')
    bot.send_sticker(message.chat.id, sti)
    markup.add(types.InlineKeyboardButton("–ü–æ—Å–µ—Ç–∏—Ç—å –º–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –≤–∫", url="https://vk.com/vinglivskt"))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞", parse_mode='html',
                     reply_markup=markup)


@bot.message_handler(commands=['oll'])
def oll_transfer(message):
    sti = open('static/Putin7.png', 'rb')
    bot.send_sticker(message.chat.id, sti)
    send = bot.send_message(message.chat.id,
                            "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—ã –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –í–ê–õ–Æ–¢–ê_–í–ê–õ–Æ–¢–ê\n–ü—Ä–∏–º–µ—Ä: USD_UAH")
    bot.register_next_step_handler(send, oll)


@bot.message_handler(content_types=['text'])
def Menu_Change(message):
    if message.chat.type == 'private':

        if message.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Åü§ë':
            sti = open('static/Putin2.jpg', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id,
                             "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç –≤ —Ä—É–±–ª—è—Ö,\n\n –¢–∞–∫ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞\n –ª—é–±–æ–π –≤–∞–ª—é—Ç—ã 1 –∫ 1".format(
                                 message.from_user, bot.get_me()), parse_mode='html', reply_markup=learn_menu())
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüíµ':
            bot.send_message(message.chat.id, toFixed(float(get_currency_price('USD_RUB')), 2))
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüá∫üá¶':
            bot.send_message(message.chat.id, toFixed(float(get_currency_price('UAH_RUB')), 2))
        elif message.text == '–£–∑–Ω–∞—Ç—å –∫—É—Ä—Åüí∂':
            bot.send_message(message.chat.id, toFixed(float(get_currency_price('EUR_RUB')), 2))
        elif message.text == 'More':
            sti = open('static/Putin7.png', 'rb')
            bot.send_sticker(message.chat.id, sti)
            send = bot.send_message(message.chat.id,
                                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—ã –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ. –ü—Ä–∏–º–µ—Ä: USD_UAH")
            bot.register_next_step_handler(send, oll)
        elif message.text == '–ù–∞–∑–∞–¥ üö™':
            bot.send_message(message.chat.id,
                             "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ù–µ –∑–≤–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç üòä".format(
                                 message.from_user, bot.get_me()),
                             parse_mode='html', reply_markup=start_menu())
        elif message.text == '–ü–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Çüí±':
            sti = open('static/Putin4.png', 'rb')
            bot.send_sticker(message.chat.id, sti)
            bot.send_message(message.chat.id,
                             "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –≤–∞–º –≤–∞–ª—é—Ç—É,"
                             "–∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ üòä".format(
                                 message.from_user, bot.get_me()),
                             parse_mode='html', reply_markup=transfer_menu())
        # –ü–µ—Ä–µ–≤–æ–¥ –î–æ–ª–ª–∞—Ä–æ–≤ –≤ –†—É–±–ª–∏
        elif message.text == 'US ‚û° RU':
            send_ru = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏")
            bot.register_next_step_handler(send_ru, usd_ru)

        # –ü–µ—Ä–µ–≤–æ–¥ –î–æ–ª–ª–∞—Ä–æ–≤ –≤ –ì—Ä–∏–≤–Ω—ã
        elif message.text == 'US ‚û° UA':
            send_ua = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –≥—Ä–∏–≤–Ω—ã")
            bot.register_next_step_handler(send_ua, usd_ua)

        # –ü–µ—Ä–µ–≤–æ–¥ –î–æ–ª–ª–∞—Ä–æ–≤ –≤ –ï–≤—Ä–æ
        elif message.text == 'US ‚û° EU':
            send_usd_eur = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –µ–≤—Ä–æ")
            bot.register_next_step_handler(send_usd_eur, usd_eur)

        #  –ü–µ—Ä–µ–≤–æ–¥ –†—É–±–ª–µ–π –≤ –ì—Ä–∏–≤–Ω—é
        elif message.text == 'RU ‚û° UA':
            send_ru_ua = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É–±–ª–µ–π –≤ –≥—Ä–∏–≤–Ω—ã")
            bot.register_next_step_handler(send_ru_ua, ru_ua)

            # –ü–µ—Ä–µ–≤–æ–¥ –†—É–±–ª–µ–π –≤ –î–æ–ª–ª–∞—Ä
        elif message.text == 'RU ‚û° US':
            send_ru_usd = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É–±–ª–µ–π –≤ –¥–æ–ª–ª–∞—Ä—ã")
            bot.register_next_step_handler(send_ru_usd, ru_usd)
            # –ü–µ—Ä–µ–≤–æ–¥ –†—É–±–ª–µ–π –≤ –ï–≤—Ä–æ

        elif message.text == 'RU ‚û° EU':
            send_ru_eur = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É–±–ª–µ–π –≤ –µ–≤—Ä–æ")
            bot.register_next_step_handler(send_ru_eur, ru_eur)

        # –ü–µ—Ä–µ–≤–æ–¥ –ì—Ä–∏–≤–Ω—ã –≤ –†—É–±–ª–∏
        elif message.text == 'UA ‚û° RU':
            send_ua_ru = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∏–≤–Ω—ã –≤ —Ä—É–±–ª–∏")
            bot.register_next_step_handler(send_ua_ru, ua_ru)

        # –ü–µ—Ä–µ–≤–æ–¥ –ì—Ä–∏–≤–Ω–∏ –≤ –î–æ–ª–ª–∞—Ä
        elif message.text == 'UA ‚û° US':
            send_ua_usd = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∏–≤–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä—ã")
            bot.register_next_step_handler(send_ua_usd, ua_usd)

            # –ü–µ—Ä–µ–≤–æ–¥ –ì—Ä–∏–≤–Ω–∏ –≤ –ï–≤—Ä–æ
        elif message.text == 'UA ‚û° EU':
            send_ua_eur = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∏–≤–Ω—ã –≤ –µ–≤—Ä–æ")
            bot.register_next_step_handler(send_ua_eur, ua_eur)

        # –ü–µ—Ä–µ–≤–æ–¥ –ï–≤—Ä–æ –≤ –î–æ–ª–ª–∞—Ä
        elif message.text == 'EU ‚û° US':
            send_eur_usd = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –µ–≤—Ä–æ –≤ –¥–æ–ª–ª–∞—Ä—ã")
            bot.register_next_step_handler(send_eur_usd, eur_usd)

            # –ü–µ—Ä–µ–≤–æ–¥ –ï–≤—Ä–æ –≤ –†—É–±–ª–∏
        elif message.text == 'EU ‚û° RU':
            send_eur_ru = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –µ–≤—Ä–æ –≤ —Ä—É–±–ª–∏")
            bot.register_next_step_handler(send_eur_ru, eur_ru)

            # –ü–µ—Ä–µ–≤–æ–¥ –ï–≤—Ä–æ –≤ –ì—Ä–∏–≤–Ω—é
        elif message.text == 'EU ‚û° UA':
            send_eur_ua = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –µ–≤—Ä–æ –≤ –≥—Ä–∏–≤–Ω—ã")
            bot.register_next_step_handler(send_eur_ua, eur_ua)



def usd_ru(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö = " + sum(float(last), get_currency_price('USD_RUB')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def eur_ru(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö = " + sum(float(last), get_currency_price('EUR_RUB')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def usd_eur(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –µ–≤—Ä–æ = " + sum(float(last), get_currency_price('USD_EUR')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ru_usd(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö = " + sum(float(last), get_currency_price('RUB_USD')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def eur_usd(message):
    try:

        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö = " + sum(float(last), get_currency_price('EUR_USD')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ru_eur(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –µ–≤—Ä–æ = " + sum(float(last), get_currency_price('RUB_EUR')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ua_ru(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö = " + sum(float(last), get_currency_price('UAH_RUB')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ru_ua(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö = " + sum(float(last), get_currency_price('RUB_UAH')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def eur_ua(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö = " + sum(float(last), get_currency_price('EUR_UAH')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def usd_ua(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö = " + sum(float(last), get_currency_price('USD_UAH')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ua_usd(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö = " + sum(float(last), get_currency_price('UAH_USD')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def ua_eur(message):
    try:
        last = message.text.split()[0]
        bot.send_message(message.chat.id,
                         "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –µ–≤—Ä–æ = " + sum(float(last), get_currency_price('UAH_EUR')))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)


def error(message):
    sti = open('static/Putin3.jpg', 'rb')
    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, oops())


def oll(message):
    try:
        last = str(message.text.split()[0])
        bot.send_message(message.chat.id,
                                   "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ " + last + " = " + toFixed(float(get_currency_price(last)), 2))
    except ValueError:
        error(message)
    except AttributeError:
        error(message)
    except KeyError:
        error(message)

# #
# def oll_exit(message):
#     try:
#         last = message.text.split()[0]
#         bot.send_message(message.chat.id,
#                          "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ –µ–≤—Ä–æ = " + last)
#     except ValueError:
#         error(message)
#     except AttributeError:
#         error(message)


# RUN
bot.polling(none_stop=True)
